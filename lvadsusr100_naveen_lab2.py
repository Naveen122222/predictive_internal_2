# -*- coding: utf-8 -*-
"""LVADSUSR100_Naveen_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1grQM6-ISF0eDICtIGDcawcODzyDE6IES
"""

import pandas as pd
data=pd.read_csv('/content/Mall_Customers.csv')
df=pd.DataFrame(data)
df.head()

#finding null values

df.isnull().sum()

#to fill the null values we use
df = df.fillna(method='ffill')
#here we use forwordfill method to fill the all NaN value

df.isnull().sum()

#here we have categorical data so we convert that into numerical representation
dummies = pd.get_dummies(df.Gender)
df = pd.concat([df,dummies],axis=1)
df.head()

df.columns

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(df[['Age']])
df['Age'] = scaler.transform(df[['Age']])
scaler.fit(df[['Annual Income (k$)']])
df[['Annual Income (k$)']]=scaler.transform(df[['Annual Income (k$)']])
scaler.fit(df[['Spending Score (1-100)']])
df[['Spending Score (1-100)']]=scaler.transform(df[['Spending Score (1-100)']])

df.head()

df=df.drop(['Gender'],axis=1)
df.head()



from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
sse = [] # The sum of Squared Errors =SSE

k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df)
    sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)


#after doing Elbow method we find k=2

km = KMeans(n_clusters=2)

predictions = km.fit_predict(df)

df['cluster']=predictions

print(km.cluster_centers_)

print(df['cluster'].unique())

df.columns

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df1.head()

#Actual we use More then two features exactly not able to do plotting
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
plt.scatter(df1['cluster'],df1['Spending Score (1-100)'],color='green')
plt.scatter(df2['cluster'],df2['Spending Score (1-100)'],color='red')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='black',marker='*',label='centroid')
plt.xlabel('cluster')
plt.ylabel('Spending Score (1-100)')
plt.legend()







